%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 67 def
/sequence (\
AGAGGGUGGGGUCCGCAAGAUCUCACCCUCUCUGUUUUGAGGGAAAGCUGGGUUUUGGGUGACCUCC AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[-118.85381317 343.90472412]
[-121.77944183 343.72689819]
[-133.21186829 353.43771362]
[-144.64430237 363.14849854]
[-156.07673645 372.85928345]
[-167.50917053 382.57009888]
[-178.94160461 392.28088379]
[-190.37402344 401.99166870]
[-201.80645752 411.70245361]
[-213.23889160 421.41326904]
[-224.67132568 431.12405396]
[-236.10375977 440.83483887]
[-247.53617859 450.54565430]
[-250.26609802 466.35473633]
[-264.39700317 473.95059204]
[-279.08886719 467.50631714]
[-283.07138062 451.96542358]
[-273.28945923 439.24954224]
[-257.24697876 439.11322021]
[-245.81454468 429.40240479]
[-234.38211060 419.69161987]
[-222.94969177 409.98083496]
[-211.51725769 400.27005005]
[-200.08482361 390.55923462]
[-188.65238953 380.84844971]
[-177.21995544 371.13766479]
[-165.78753662 361.42684937]
[-154.35510254 351.71606445]
[-142.92266846 342.00527954]
[-131.49023438 332.29446411]
[-120.60030365 321.97897339]
[-110.28481293 311.08905029]
[-107.14952087 296.52816772]
[-92.04190826 291.83026123]
[-81.72640991 280.94030762]
[-71.41091919 270.05038452]
[-61.09542847 259.16046143]
[-50.77993774 248.27052307]
[-40.46444702 237.38058472]
[-30.14895439 226.49064636]
[-19.83346176 215.60072327]
[-9.51797009 204.71078491]
[-16.25620842 191.37356567]
[-18.02811050 176.50785828]
[-14.60065269 161.90556335]
[-6.36871815 149.33349609]
[5.69029808 140.31961060]
[20.13250732 135.96726990]
[35.22039795 136.82026672]
[49.13186646 142.79490662]
[59.44735718 131.90498352]
[69.76284790 121.01504517]
[80.07833862 110.12511444]
[74.26161957 100.66517639]
[73.36904907 88.15372467]
[78.83764648 75.27246857]
[90.63798523 65.29377747]
[92.66298676 50.43109512]
[85.95830536 35.46515656]
[95.78481293 22.33611107]
[112.03383636 24.54999733]
[117.98977661 39.82935715]
[107.52567291 52.45609665]
[105.50067139 67.31877899]
[111.53227997 71.77632141]
[120.44756317 59.71324921]
[132.51048279 68.62873077]
[123.59550476 80.69140625]
[129.62710571 85.14894867]
[143.24073792 78.85060883]
[156.85437012 72.55227661]
[170.46800232 66.25393677]
[184.08163452 59.95560074]
[197.69526672 53.65726471]
[211.30889893 47.35892487]
[224.92253113 41.06058884]
[231.78231812 26.55808067]
[247.43026733 23.01951218]
[259.86260986 33.15937042]
[259.54229736 49.19922638]
[246.71507263 58.83467484]
[231.22087097 54.67422104]
[217.60723877 60.97255707]
[203.99360657 67.27089691]
[190.37997437 73.56922913]
[176.76634216 79.86756897]
[163.15270996 86.16590118]
[149.53907776 92.46424103]
[135.92544556 98.76258087]
[116.32706451 124.14474487]
[90.96827698 120.44060516]
[80.65277863 131.33053589]
[70.33728790 142.22047424]
[60.02179718 153.11039734]
[66.74082947 166.67800903]
[68.40941620 181.69758606]
[64.84535217 196.35424805]
[56.49754333 208.88357544]
[44.38958740 217.78407288]
[29.99426460 221.99707031]
[15.05442333 221.03257751]
[1.37196207 215.02627563]
[-8.94353008 225.91621399]
[-19.25902176 236.80615234]
[-29.57451439 247.69607544]
[-39.89000702 258.58599854]
[-50.20549774 269.47595215]
[-60.52098846 280.36587524]
[-70.83647919 291.25579834]
[-81.15196991 302.14575195]
[-85.02510071 317.48553467]
[-99.39488220 321.40454102]
[-109.71037292 332.29446411]
[-110.60443878 336.85919189]
[-112.75432587 340.47579956]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[31 113]
[32 112]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[50 94]
[51 93]
[52 92]
[53 91]
[57 64]
[58 63]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% Start Annotations
1 67 9  0 0.9 0.2 omark
69 115 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

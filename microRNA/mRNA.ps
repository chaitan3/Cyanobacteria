%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Sun Jun  3 22:36:27 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUAUGACCAGCAUUCUUCGCGAGCAACGCCGCGAUAACGUUUGGGAUCGGUUU\
) def
/coor [
[-10.29403496 152.60562134]
[-20.01746178 164.02731323]
[-29.74088669 175.44900513]
[-39.46431351 186.87068176]
[-49.18774033 198.29237366]
[-58.91116333 209.71406555]
[-68.63459015 221.13575745]
[-78.35801697 232.55744934]
[-78.51208496 248.59976196]
[-91.23876953 258.36761475]
[-106.77525330 254.36795044]
[-113.20326996 239.66896057]
[-105.59179688 225.54646301]
[-89.77970886 222.83401489]
[-80.05628204 211.41233826]
[-70.33285522 199.99064636]
[-60.60942841 188.56895447]
[-50.88600159 177.14726257]
[-41.16257477 165.72557068]
[-31.43914986 154.30387878]
[-21.71572495 142.88220215]
[-36.33778763 146.22813416]
[-51.28808594 145.00804138]
[-65.17415619 139.33557129]
[-76.70267487 129.73904419]
[-84.79987335 117.11227417]
[-88.71159363 102.63130188]
[-88.07350159 87.64488220]
[-82.94502258 73.54882812]
[-73.80382538 61.65604019]
[-61.50130844 53.07419205]
[-47.18331909 48.60259628]
[-32.18342209 48.65773392]
[-17.89869118 53.23446655]
[-5.65959549 61.90652084]
[3.39392638 73.86619568]
[8.41863823 87.99956512]
[8.94654274 102.99027252]
[4.92847109 117.44209290]
[-3.26184869 130.00956726]
[10.81517792 124.82909393]
[24.89220428 119.64862061]
[38.96923065 114.46813965]
[53.04625702 109.28766632]
[67.12328339 104.10719299]
[81.20030975 98.92671204]
[83.85604858 90.30705261]
[90.21569824 83.91125488]
[98.82016754 81.20669556]
[107.69532776 82.81389618]
[114.80493927 88.36410522]
[129.31436157 84.55928802]
[143.82379150 80.75447083]
[158.33320618 76.94964600]
[160.45968628 61.92454529]
[168.15591431 48.89338684]
[180.22230530 39.82608414]
[194.80140686 36.07945251]
[209.66386414 38.19426346]
[222.54924011 45.81742096]
[231.50985718 57.76047134]
[246.01928711 53.95565033]
[260.52871704 50.15083313]
[275.03814697 46.34601593]
[289.54754639 42.54119492]
[297.22439575 37.24417496]
[304.58309937 38.85492325]
[319.20703125 35.51710892]
[333.30358887 26.09782600]
[346.25708008 37.03598404]
[339.33227539 52.51123428]
[322.54483032 50.14102936]
[307.92092896 53.47884369]
[293.35238647 57.05061722]
[278.84295654 60.85543823]
[264.33352661 64.66025543]
[249.82411194 68.46507263]
[235.31468201 72.26988983]
[233.36778259 87.07323456]
[225.88133240 100.03851318]
[213.96917725 109.17445374]
[199.42759705 113.06416321]
[184.46444702 111.08483887]
[171.36395264 103.50722504]
[162.13803101 91.45906830]
[147.62860107 95.26389313]
[133.11918640 99.06871033]
[118.60975647 102.87352753]
[105.64638519 117.96381378]
[86.38078308 113.00373840]
[72.30375671 118.18421936]
[58.22673416 123.36469269]
[44.14970779 128.54516602]
[30.07267952 133.72564697]
[15.99565315 138.90612793]
[1.91862714 144.08659363]
[-1.17595768 148.87232971]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[51 88]
[52 87]
[53 86]
[54 85]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 60 def
/sequence (\
CUUGGUCAAAGGGGCCAGCCAAGGUGAAGGGCUGGGCAACCAGUUUCUGUCCCACAUUCG AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[69.46658325 247.87962341]
[59.89855957 259.43182373]
[50.33053970 270.98400879]
[40.76251984 282.53619385]
[31.19449806 294.08837891]
[21.62647629 305.64056396]
[27.58552170 319.73837280]
[26.29885674 334.98968506]
[18.06214714 347.88989258]
[4.76813078 355.47460938]
[-10.52832699 356.00088501]
[-24.31221008 349.34783936]
[-33.41608429 337.04425049]
[-35.74794769 321.91741943]
[-30.77195168 307.44338989]
[-19.63154411 296.94815063]
[-4.88671255 292.84344482]
[10.07429218 296.07254028]
[19.64231300 284.52035522]
[29.21033287 272.96817017]
[38.77835464 261.41598511]
[48.34637451 249.86380005]
[57.91439438 238.31161499]
[64.39481354 224.78370667]
[67.40062714 210.08795166]
[70.40644836 195.39221191]
[73.41226196 180.69645691]
[76.41807556 166.00070190]
[79.42389679 151.30494690]
[82.42971039 136.60920715]
[85.43552399 121.91345215]
[88.44133759 107.21770477]
[85.22406769 92.56679535]
[76.33747864 80.48256683]
[67.45089722 68.39833832]
[58.56431198 56.31410599]
[49.50451279 44.35918808]
[40.27337646 32.53607178]
[24.92059517 34.05123901]
[11.19627666 27.00520325]
[3.47979736 13.64632988]
[4.23345852 -1.76261342]
[13.21676922 -14.30468941]
[27.56318855 -19.97776794]
[42.69482422 -16.97158813]
[53.78322983 -6.24541330]
[57.29013062 8.77807426]
[52.09649277 23.30493355]
[61.32762909 35.12805176]
[68.02615356 38.51470947]
[70.64854431 47.42752075]
[79.53512573 59.51174927]
[88.42170715 71.59597778]
[97.30829620 83.68021393]
[89.49981689 70.87287903]
[91.16493988 55.96558762]
[101.60682678 45.19679260]
[116.45572662 43.07305908]
[129.49760437 50.48313904]
[135.27465820 64.32602692]
[131.36927795 78.80870819]
[119.41460419 87.87080383]
[132.10723877 79.87725830]
[144.79988098 71.88370514]
[157.49252319 63.89015579]
[170.18516541 55.89660645]
[182.87780762 47.90305328]
[195.57044983 39.90950394]
[208.26309204 31.91595268]
[213.20475769 16.65294075]
[228.26910400 11.13522816]
[241.90003967 19.59553146]
[243.64111328 35.54383087]
[232.15667725 46.74595642]
[216.25665283 44.60859299]
[203.56401062 52.60214615]
[190.87136841 60.59569550]
[178.17872620 68.58924866]
[165.48608398 76.58279419]
[152.79344177 84.57634735]
[140.10079956 92.56990051]
[127.40815735 100.56344604]
[115.20526123 111.48277283]
[103.13709259 110.22351837]
[100.13127899 124.91927338]
[97.12545776 139.61502075]
[94.11964417 154.31077576]
[91.11383057 169.00651550]
[88.10800934 183.70227051]
[85.10219574 198.39802551]
[82.09638214 213.09376526]
[79.09056091 227.78952026]
[90.34520721 217.87321472]
[104.16149139 212.03282166]
[119.11634064 210.86988831]
[133.66940308 214.50421143]
[146.32171631 222.56144714]
[155.77008057 234.21171570]
[161.04130554 248.25500488]
[161.59246826 263.24487305]
[157.36679077 277.63735962]
[148.79953003 289.95004272]
[136.77310181 298.91467285]
[122.52622986 303.60794067]
[107.52635193 303.54641724]
[93.31846619 298.73645020]
[81.36597443 289.67346191]
[72.89999390 277.29092407]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[24 92]
[25 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 54]
[34 53]
[35 52]
[36 51]
[37 49]
[38 48]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% Start Annotations
1 60 9  0 0.9 0.2 omark
62 108 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

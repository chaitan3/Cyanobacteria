%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 67 def
/sequence (\
GUGUCGAGUCUCCCGGUGGAUGUAUGGGGGGCGCAAUCACCCCCACGGAUAGAGGCUGUUGACUCUA AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[50.57368469 413.40502930]
[53.28520966 394.21395874]
[53.69139862 379.21945190]
[54.09759140 364.22494507]
[54.50378036 349.23046875]
[54.90997314 334.23596191]
[55.31616211 319.24145508]
[52.31178665 312.37878418]
[55.94185257 303.84793091]
[56.75393677 288.86993408]
[57.56602097 273.89193726]
[49.98256683 266.80300903]
[47.57308960 256.47836304]
[51.39118958 246.35084534]
[60.37690353 239.92898560]
[61.99868774 225.01692200]
[59.56119156 217.93304443]
[63.87163162 209.72496033]
[65.89663696 194.86227417]
[59.94834518 181.20698547]
[69.47783661 168.57768250]
[71.50283813 153.71499634]
[73.52783966 138.85231018]
[75.55284119 123.98962402]
[67.64620209 111.24266052]
[53.43140411 106.45314026]
[39.21660614 101.66361237]
[25.00180817 96.87409210]
[10.78701019 92.08457184]
[-3.42778707 87.29504395]
[-15.41134834 97.01090240]
[-30.74784088 98.68288422]
[-44.54344940 91.77746582]
[-52.39603806 78.49814606]
[-51.79988480 63.08230209]
[-42.94520950 50.44908142]
[-28.65751457 44.62969208]
[-13.49594688 47.48108292]
[-2.29850984 58.09338379]
[1.36173582 73.08024597]
[15.57653332 77.86977386]
[29.79133034 82.65929413]
[44.00613022 87.44882202]
[58.22092438 92.23834229]
[72.43572235 97.02786255]
[86.37625122 79.28831482]
[106.45375824 79.11709595]
[115.53137207 67.17570496]
[113.59577179 51.71959686]
[122.97187805 39.73863602]
[137.71884155 37.98859024]
[146.79644775 26.04719543]
[155.87406921 14.10579967]
[164.95167542 2.16440344]
[167.14356995 -13.50423241]
[181.00540161 -18.95391083]
[190.08302307 -30.89530754]
[198.83393860 -43.07814026]
[207.25173950 -55.49347305]
[215.66954041 -67.90881348]
[223.57618713 -80.65576935]
[230.95860291 -93.71333313]
[238.34103394 -106.77088928]
[245.72346497 -119.82844543]
[253.10588074 -132.88600159]
[260.48831177 -145.94355774]
[268.05895996 -163.78550720]
[284.93078613 -154.24658203]
[273.54586792 -138.56114197]
[266.16345215 -125.50357819]
[258.78100586 -112.44602203]
[251.39859009 -99.38846588]
[244.01617432 -86.33090973]
[236.63374329 -73.27334595]
[237.29980469 -69.68181610]
[236.17230225 -65.58485413]
[233.03218079 -61.87073517]
[228.08488464 -59.49100494]
[219.66706848 -47.07566833]
[211.24926758 -34.66033554]
[211.28808594 -29.76255226]
[208.15838623 -24.81772804]
[202.02441406 -21.81769371]
[192.94679260 -9.87629795]
[191.40419006 4.93821001]
[176.89306641 11.24201679]
[167.81546021 23.18341255]
[158.73785400 35.12480927]
[149.66023254 47.06620407]
[151.91920471 61.74382782]
[142.88333130 73.98341370]
[127.47277069 76.25331879]
[118.39515686 88.19470978]
[123.29129028 101.23622131]
[119.32925415 115.52290344]
[107.01867676 125.30194855]
[90.41551971 126.01462555]
[88.39052582 140.87730408]
[86.36552429 155.73999023]
[84.34052277 170.60267639]
[90.14396667 185.32106018]
[80.75931549 196.88728333]
[78.73431396 211.74996948]
[76.91075897 226.63870239]
[75.28897095 241.55076599]
[84.32545471 259.47100830]
[72.54402161 274.70401001]
[71.73194122 289.68203735]
[70.91985321 304.66003418]
[70.31066132 319.64764404]
[69.90447235 334.64215088]
[69.49828339 349.63665771]
[69.09208679 364.63113403]
[68.68589783 379.62564087]
[68.27970886 394.62014771]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 110]
[9 109]
[10 108]
[11 107]
[15 105]
[16 104]
[18 103]
[19 102]
[21 100]
[22 99]
[23 98]
[24 97]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[47 93]
[48 92]
[51 89]
[52 88]
[53 87]
[54 86]
[56 84]
[57 83]
[58 80]
[59 79]
[60 78]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
[66 69]
] def

init

% Start Annotations
1 67 9  0 0.9 0.2 omark
69 115 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

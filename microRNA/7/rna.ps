%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 80 def
/sequence (\
UUGUCGACUUGAGCGAGUUUGAAGAAUGGCUCAGGCGUGAUUUGAACACGCGACCAAGGGCUUAUGAGUCCCCUGCUCUA AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[87.83189392 332.26104736]
[90.49102783 313.06262207]
[90.85629272 298.06707764]
[91.22155762 283.07153320]
[91.58682251 268.07595825]
[91.95208740 253.08041382]
[92.31735229 238.08486938]
[92.50000000 223.08598328]
[92.50000000 208.08598328]
[92.50000000 193.08598328]
[92.50000000 178.08598328]
[92.50000000 163.08598328]
[92.50000000 148.08598328]
[73.64313507 140.91242981]
[59.31583786 126.70787048]
[45.65759659 132.90887451]
[31.99935341 139.10987854]
[18.34111023 145.31088257]
[4.68286896 151.51187134]
[1.69970453 166.73950195]
[-9.68719292 177.28076172]
[-25.09933090 179.08233643]
[-38.61042404 171.45147705]
[-45.02518463 157.32241821]
[-41.87700653 142.12805176]
[-30.37642479 131.71093750]
[-14.94565201 130.07666016]
[-1.51813293 137.85363770]
[12.14010906 131.65263367]
[25.79835129 125.45162964]
[39.45659256 119.25063324]
[53.11483383 113.04962921]
[51.41452408 102.82189178]
[51.91932297 92.46607971]
[54.60631943 82.45220184]
[41.61594009 74.95220184]
[28.62555695 67.45220184]
[15.63517666 59.95220184]
[2.64479566 52.45220184]
[-11.98686028 57.97023010]
[-26.72508240 52.74348831]
[-34.61093140 39.23988342]
[-31.92095375 23.83540154]
[-19.92527199 13.80357170]
[-4.28787994 13.88111496]
[7.60772228 24.03141785]
[10.14479542 39.46181870]
[23.13517761 46.96181870]
[36.12555695 54.46181870]
[49.11594009 61.96181870]
[62.10631943 69.46182251]
[73.75479126 59.01585007]
[88.11592102 52.80593109]
[103.70536804 51.47390747]
[118.91182709 55.15745163]
[132.16360474 63.47584152]
[143.69331360 53.88074875]
[155.22302246 44.28565216]
[166.75273132 34.69055557]
[178.28242493 25.09546089]
[189.81213379 15.50036621]
[188.57080078 3.55310631]
[193.24859619 -7.37919235]
[202.55703735 -14.58319950]
[214.07482910 -16.33319283]
[224.87705994 -12.30329895]
[236.86024475 -21.32566071]
[248.84344482 -30.34802246]
[260.82662964 -39.37038422]
[272.80984497 -48.39274597]
[269.03549194 -68.39016724]
[275.71038818 -87.53632355]
[290.98678589 -100.75597382]
[310.74746704 -104.58394623]
[329.71502686 -98.07325745]
[340.25686646 -108.74423981]
[350.79867554 -119.41522217]
[361.34051514 -130.08619690]
[371.88235474 -140.75718689]
[383.85769653 -155.99662781]
[397.64581299 -142.37539673]
[382.55331421 -130.21536255]
[372.01150513 -119.54437256]
[361.46966553 -108.87339020]
[350.92782593 -98.20240784]
[340.38601685 -87.53143311]
[345.02291870 -78.43282318]
[347.13006592 -68.42299652]
[346.55291748 -58.19287109]
[343.32241821 -48.45096207]
[337.65365601 -39.87429810]
[329.93148804 -33.06140137]
[320.68441772 -28.49049759]
[310.54843140 -26.48596001]
[300.22326660 -27.19530869]
[290.42416382 -30.57839584]
[281.83221436 -36.40955353]
[269.84899902 -27.38718987]
[257.86581421 -18.36482811]
[245.88261414 -9.34246540]
[233.89941406 -0.32010284]
[232.51571655 17.85790253]
[218.10415649 29.53279305]
[199.40722656 27.03007317]
[187.87753296 36.62516785]
[176.34782410 46.22026443]
[164.81811523 55.81535721]
[153.28840637 65.41045380]
[141.75869751 75.00554657]
[147.03160095 87.48843384]
[148.65824890 100.94131470]
[146.51251221 114.32121277]
[140.76075745 126.59082031]
[131.84890747 136.79888916]
[120.46787262 144.15402222]
[107.50000000 148.08598328]
[107.50000000 163.08598328]
[107.50000000 178.08598328]
[107.50000000 193.08598328]
[107.50000000 208.08598328]
[107.50000000 223.08598328]
[110.65541077 231.77095032]
[107.31290436 238.45013428]
[106.94763947 253.44567871]
[106.58237457 268.44122314]
[106.21710968 283.43679810]
[105.85184479 298.43234253]
[105.48657990 313.42788696]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[13 116]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[75 86]
[76 85]
[77 84]
[78 83]
[79 82]
] def

init

% Start Annotations
1 80 9  0 0.9 0.2 omark
82 128 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

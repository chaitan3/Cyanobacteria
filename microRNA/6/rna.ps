%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 94 def
/sequence (\
CCGAUGUGAUCGCCCCAGCUGAGGCAGCUUGUAAACGGGCGAUCGCGGAAGCGCGGGGGGCCGCCGCCCGUAUCGUCGAAGAUGGAAAAGCUCA AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[108.95007324 115.04264832]
[104.20369720 118.99320221]
[97.84017944 121.29255676]
[90.47857666 121.32139587]
[82.96123505 118.70184326]
[69.31674957 124.93306732]
[55.67227173 131.16429138]
[42.02779007 137.39552307]
[28.38331223 143.62673950]
[14.73883247 149.85797119]
[1.09435213 156.08918762]
[-12.55012798 162.32041931]
[-26.19460678 168.55163574]
[-39.83908844 174.78286743]
[-53.48356628 181.01409912]
[-66.76541138 187.98493958]
[-79.64455414 195.67439270]
[-92.43846130 203.50483704]
[-105.14557648 211.47535706]
[-117.85269928 219.44586182]
[-130.55981445 227.41638184]
[-140.76498413 240.95487976]
[-156.59945679 234.89637756]
[-155.16114807 218.00355530]
[-138.53033447 214.70925903]
[-125.82321167 206.73873901]
[-113.11609650 198.76823425]
[-100.40897369 190.79771423]
[-96.38282776 184.53041077]
[-87.33399963 182.79524231]
[-74.45485687 175.10578918]
[-87.94979095 168.55700684]
[-91.46301270 153.97422791]
[-82.43096161 141.99833679]
[-67.44421387 141.36798096]
[-57.43840790 152.54313660]
[-59.71479416 167.36961365]
[-46.07031250 161.13838196]
[-32.42583466 154.90716553]
[-18.78135300 148.67593384]
[-5.13687325 142.44471741]
[8.50760651 136.21348572]
[22.15208626 129.98225403]
[35.79656601 123.75103760]
[49.44104767 117.51981354]
[63.08552551 111.28858948]
[76.73000336 105.05735779]
[61.88325119 107.19602966]
[50.29054260 97.67714691]
[49.49936676 82.69802856]
[60.02482224 72.01089478]
[75.01425934 72.57365417]
[84.70861816 84.01949310]
[78.62763977 70.30739594]
[72.54666901 56.59529114]
[66.46569824 42.88318634]
[60.38472366 29.17108345]
[47.71718216 19.69248009]
[49.63054657 4.92128086]
[43.54957199 -8.79082203]
[31.60121346 -20.81883430]
[39.85153198 -35.62993240]
[56.36772156 -31.80215836]
[57.26167297 -14.87179565]
[63.34264755 -1.15969241]
[75.57524109 7.33813047]
[74.09682465 23.09011078]
[80.17780304 36.80221176]
[86.25877380 50.51431656]
[92.33974457 64.22641754]
[98.42072296 77.93852234]
[111.12783813 85.90903473]
[126.11969757 85.41481781]
[141.11155701 84.92060089]
[156.10340881 84.42638397]
[171.08892822 83.76751709]
[186.06631470 82.94409180]
[193.87257385 71.91117096]
[206.43309021 67.47703552]
[219.06039429 71.05764771]
[227.17872620 81.12142944]
[242.17057800 80.62721252]
[250.72103882 77.19476318]
[257.49642944 80.29045868]
[272.49551392 80.12569427]
[276.35736084 64.48750305]
[284.09844971 50.37372971]
[295.19534302 38.72732162]
[308.90060425 30.32478714]
[324.29315186 25.72440910]
[340.34014893 25.22915459]
[355.96627808 28.86672974]
[370.12594604 36.38809204]
[381.87295532 47.28448486]
[390.42410278 60.82186508]
[395.21102905 76.09033203]
[410.18841553 75.26689911]
[425.16580200 74.44347382]
[440.14318848 73.62004089]
[455.12057495 72.79660797]
[470.09796143 71.97318268]
[485.07531738 71.14974976]
[500.05270386 70.32631683]
[511.78494263 59.38400650]
[527.63317871 61.87665176]
[535.44000244 75.89211273]
[529.21667480 90.67893219]
[513.73724365 94.89392090]
[500.87612915 85.30370331]
[485.89877319 86.12712860]
[470.92138672 86.95056152]
[455.94400024 87.77399445]
[440.96661377 88.59741974]
[425.98922729 89.42085266]
[411.01184082 90.24428558]
[396.03448486 91.06771088]
[393.56933594 104.81333923]
[388.07861328 117.66211700]
[379.83926392 128.95692444]
[369.26892090 138.11921692]
[356.90472412 144.67874146]
[343.37606812 148.29759216]
[329.37243652 148.78765869]
[315.60839844 146.12040710]
[302.78710938 140.42848206]
[291.56430054 131.99914551]
[282.51489258 121.25975800]
[276.10345459 108.75613403]
[272.66027832 95.12478638]
[257.66119385 95.28955841]
[242.66479492 95.61906433]
[227.67294312 96.11328125]
[216.75456238 108.85900879]
[199.66200256 109.82077026]
[186.88973999 97.92147064]
[171.91236877 98.74490356]
[165.35557556 102.28010559]
[156.59762573 99.41824341]
[141.60577393 99.91246033]
[126.61391449 100.40667725]
[111.62205505 100.90089417]
[112.55155945 105.25155640]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 31]
[17 30]
[18 28]
[19 27]
[20 26]
[21 25]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[59 65]
[60 64]
[72 141]
[73 140]
[74 139]
[75 138]
[76 136]
[77 135]
[81 132]
[82 131]
[84 130]
[85 129]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% Start Annotations
1 94 9  0 0.9 0.2 omark
96 142 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

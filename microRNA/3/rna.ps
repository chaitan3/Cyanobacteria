%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 67 def
/sequence (\
AAUCGAGUUGUCUUGAGAGUUGAUCAUGAGCCUAAAGGUAGGCGAGCCAUCCUGAAGUAAAACUUUU AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[57.46322632 417.70089722]
[63.50956345 401.86178589]
[63.50956345 386.86178589]
[63.50956345 371.86178589]
[63.50956345 356.86178589]
[63.50956345 341.86178589]
[61.48003006 339.74707031]
[60.22499466 336.64804077]
[60.14469910 332.87844849]
[61.50932312 328.89855957]
[64.40957642 325.26199341]
[66.03136444 310.34991455]
[67.65315247 295.43783569]
[69.27493286 280.52578735]
[70.89672089 265.61370850]
[72.51850128 250.70164490]
[74.14028931 235.78956604]
[71.70279694 228.70570374]
[76.01323700 220.49761963]
[78.03823853 205.63493347]
[80.06323242 190.77224731]
[82.08823395 175.90956116]
[66.93107605 170.63667297]
[53.17397308 162.37319946]
[41.39936447 151.46900940]
[32.10576248 138.38574219]
[25.68662834 123.67733002]
[22.41373444 107.96646881]
[22.42564964 91.91833496]
[25.72186661 76.21235657]
[11.94267273 70.28497314]
[-1.83652174 64.35759735]
[-15.61571598 58.43022156]
[-29.39491081 52.50284195]
[-45.60903168 54.95932388]
[-55.63065338 41.97859955]
[-49.15039062 26.91413116]
[-32.83458328 25.26294899]
[-23.46753120 38.72364807]
[-9.68833733 44.65102768]
[4.09085655 50.57840347]
[17.87005043 56.50578308]
[31.64924431 62.43315887]
[35.66194534 55.91249466]
[40.29465485 49.81668472]
[45.50272369 44.20447922]
[51.23596954 39.12995529]
[57.43913651 34.64201736]
[64.05245209 30.78391266]
[71.01217651 27.59282303]
[78.25125122 25.09949875]
[85.69991302 23.32796669]
[93.28637695 22.29529953]
[100.93753815 22.01144791]
[102.55932617 7.09937859]
[104.18111420 -7.81269073]
[105.80289459 -22.72476006]
[107.42468262 -37.63682938]
[103.12629700 -54.03683472]
[117.69547272 -62.70721054]
[130.06016541 -51.10760117]
[122.33675385 -36.01504517]
[120.71496582 -21.10297394]
[119.09317780 -6.19090509]
[117.47139740 8.72116375]
[115.84960938 23.63323402]
[136.25672913 30.94536209]
[153.86302185 43.59194565]
[167.30841064 60.59603882]
[180.92202759 54.29770279]
[194.53565979 47.99936676]
[208.14929199 41.70103073]
[221.76292419 35.40269470]
[235.37655640 29.10435867]
[248.99018860 22.80602074]
[262.60382080 16.50768471]
[269.46362305 2.00517488]
[285.11157227 -1.53339362]
[297.54388428 8.60646629]
[297.22357178 24.64632225]
[284.39636230 34.28176880]
[268.90216064 30.12131691]
[255.28852844 36.41965103]
[241.67489624 42.71799088]
[228.06126404 49.01632690]
[214.44763184 55.31466293]
[200.83399963 61.61299896]
[187.22036743 67.91133881]
[173.60673523 74.20967102]
[177.20561218 88.93714905]
[177.88725281 104.08264160]
[175.62593079 119.07386780]
[170.50706482 133.34437561]
[162.72407532 146.35498047]
[152.57104492 157.61404419]
[140.43162537 166.69615173]
[126.76447296 173.25814819]
[112.08603668 177.05206299]
[96.95092010 177.93457031]
[94.92591858 192.79724121]
[92.90091705 207.65992737]
[90.87592316 222.52261353]
[89.05236053 237.41136169]
[87.43057251 252.32342529]
[85.80879211 267.23550415]
[84.18700409 282.14755249]
[82.56521606 297.05963135]
[80.94343567 311.97171021]
[79.32164764 326.88378906]
[78.50956726 341.86178589]
[78.50956726 356.86178589]
[78.50956726 371.86178589]
[78.50956726 386.86178589]
[78.50956726 401.86178589]
[84.55590057 417.70089722]
] def
/pairs [
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[19 102]
[20 101]
[21 100]
[22 99]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% Start Annotations
1 67 9  0 0.9 0.2 omark
69 115 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

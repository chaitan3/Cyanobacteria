%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 56 def
/sequence (\
CAUCCGUUGGGGGUUUAAGUCUAGGCGUAUUAACGGAGUCUACGACUAGACGCUCG AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[87.00256348 356.24371338]
[93.04889679 340.40460205]
[93.04889679 325.40460205]
[93.04889679 310.40460205]
[85.31159973 297.67730713]
[93.04889679 283.87713623]
[93.04889679 268.87713623]
[93.04889679 253.87715149]
[83.44223785 239.27543640]
[92.56507874 223.36807251]
[92.11634064 208.37478638]
[91.66761017 193.38150024]
[91.21887970 178.38821411]
[90.77014923 163.39492798]
[90.32141876 148.40164185]
[87.86064148 145.66175842]
[86.69456482 141.53295898]
[87.48919678 136.68148804]
[90.56594086 132.05752563]
[91.46300507 117.08437347]
[81.92720795 106.17498779]
[82.79373932 91.71139526]
[93.56384277 82.01856232]
[94.46090698 67.04541016]
[95.35797119 52.07225800]
[92.71602631 43.15235138]
[96.51245880 36.66667175]
[97.85704803 21.72705841]
[99.20163727 6.78744364]
[97.18813324 3.14242029]
[96.39979553 -0.59115297]
[96.72934723 -4.04803038]
[97.96988678 -6.92798185]
[99.84194183 -9.02078533]
[102.02616882 -10.22153187]
[105.58237457 -24.79388237]
[109.13858032 -39.36623383]
[112.69478607 -53.93858337]
[116.25099182 -68.51093292]
[119.80719757 -83.08328247]
[123.36340332 -97.65563202]
[112.70707703 -106.85361481]
[107.11310577 -119.69885254]
[107.63274384 -133.63311768]
[114.10586548 -145.90840149]
[125.20394897 -154.12881470]
[138.70230103 -156.71821594]
[142.69285583 -171.17765808]
[146.68341064 -185.63710022]
[150.67396545 -200.09654236]
[146.88685608 -215.45780945]
[157.73124695 -225.66801453]
[161.72180176 -240.12745667]
[165.71235657 -254.58689880]
[169.70289612 -269.04635620]
[168.08824158 -285.92321777]
[183.85859680 -292.14675903]
[194.20458984 -278.71557617]
[184.16233826 -265.05578613]
[180.17179871 -250.59634399]
[176.18124390 -236.13690186]
[172.19068909 -221.67745972]
[176.26322937 -207.35043335]
[165.13340759 -196.10598755]
[161.14285278 -181.64654541]
[157.15229797 -167.18710327]
[153.16175842 -152.72766113]
[164.74449158 -141.56947327]
[169.19058228 -126.01609039]
[165.20960999 -110.24095154]
[153.78558350 -98.52598572]
[137.93576050 -94.09942627]
[134.37954712 -79.52707672]
[130.82334900 -64.95472717]
[127.26713562 -50.38237762]
[123.71092987 -35.81002808]
[120.15472412 -21.23767662]
[116.59851837 -6.66532564]
[114.14125061 8.13203335]
[112.79666138 23.07164764]
[111.45207214 38.01126099]
[110.33112335 52.96931839]
[109.43405914 67.94247437]
[108.53699493 82.91562653]
[118.07279205 93.82501221]
[117.20626068 108.28860474]
[106.43615723 117.98143768]
[105.53909302 132.95458984]
[105.31470490 147.95291138]
[105.76343536 162.94619751]
[106.21216583 177.93948364]
[106.66089630 192.93276978]
[107.10962677 207.92605591]
[107.55836487 222.91934204]
[116.45230103 232.40805054]
[116.42741394 245.01026917]
[108.04889679 253.87715149]
[108.04889679 268.87713623]
[108.04889679 283.87713623]
[115.78620148 297.67730713]
[108.04889679 310.40460205]
[108.04889679 325.40460205]
[108.04889679 340.40460205]
[114.09523773 356.24371338]
] def
/pairs [
[2 103]
[3 102]
[4 101]
[6 99]
[7 98]
[8 97]
[10 94]
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[19 88]
[20 87]
[23 84]
[24 83]
[25 82]
[27 81]
[28 80]
[29 79]
[35 78]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[47 67]
[48 66]
[49 65]
[50 64]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% Start Annotations
1 56 9  0 0.9 0.2 omark
58 104 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

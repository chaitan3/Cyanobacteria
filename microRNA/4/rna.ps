%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed May 30 10:37:42 2012
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/cutpoint 50 def
/sequence (\
GCGAUCAAGCGGGGUGCUGGAGGCAGCCGGAGCGGGACGUUCGAGAACUG AGAGUUUUUAACUAAGACUCUUGCCCUUUACAACCUCAAGAUCGAUA\
) def
/coor [
[91.60166168 428.82641602]
[101.08164978 415.88388062]
[100.13029480 400.91406250]
[99.17893219 385.94427490]
[98.22757721 370.97445679]
[97.27621460 356.00466919]
[87.10982513 350.37094116]
[80.93418884 340.38174438]
[80.42812347 328.52740479]
[85.83920288 317.83215332]
[95.89034271 311.08239746]
[95.89034271 296.08239746]
[95.89034271 281.08239746]
[95.89034271 266.08239746]
[95.89034271 251.08241272]
[85.20947266 240.76472473]
[84.99578857 225.55259705]
[95.89034271 214.41946411]
[95.89034271 199.41946411]
[95.89034271 184.41946411]
[95.89034271 169.41946411]
[95.89034271 154.41946411]
[95.89034271 139.41946411]
[95.65235138 124.42135620]
[95.17643738 109.42890930]
[83.20570374 108.80049896]
[72.91011047 96.38717651]
[57.36184311 97.33008575]
[46.00521088 87.20676422]
[45.20211411 72.37805939]
[33.86586761 62.55514526]
[22.52962494 52.73223495]
[11.19338226 42.90932465]
[-0.14286140 33.08641434]
[-16.07279015 27.28350639]
[-14.90650463 10.36972141]
[1.66914248 6.80822563]
[9.68004990 21.75016975]
[21.01629257 31.57308197]
[32.35253525 41.39599228]
[43.68878174 51.21890259]
[55.02502441 61.04181290]
[69.81709290 59.72639465]
[81.45358276 69.52673340]
[82.73302460 85.05093384]
[73.46646118 73.25556183]
[74.50165558 58.29132462]
[85.30413818 47.88429260]
[100.29656982 47.40763855]
[111.73831177 57.10745621]
[113.72197723 71.97571564]
[105.22169495 84.33705902]
[115.91210938 73.81493378]
[126.60252380 63.29280853]
[137.29293823 52.77068710]
[147.98335266 42.24856186]
[158.67376709 31.72643852]
[169.36416626 21.20431519]
[180.05458069 10.68219185]
[181.61917114 -5.28438616]
[195.15573120 -13.89491367]
[210.28016663 -8.54412937]
[215.39031982 6.66330147]
[206.56610107 20.06154060]
[190.57670593 21.37260437]
[179.88629150 31.89472771]
[169.19587708 42.41685104]
[158.50547791 52.93897629]
[147.81506348 63.46109772]
[137.12464905 73.98322296]
[126.43423462 84.50534821]
[115.74382019 95.02746582]
[110.16888428 108.95298767]
[110.64480591 123.94543457]
[114.09695435 132.60609436]
[110.89034271 139.41946411]
[110.89034271 154.41946411]
[110.89034271 169.41946411]
[110.89034271 184.41946411]
[110.89034271 199.41946411]
[110.89034271 214.41946411]
[121.78489685 225.55259705]
[121.57121277 240.76472473]
[110.89034271 251.08241272]
[110.89034271 266.08239746]
[110.89034271 281.08239746]
[110.89034271 296.08239746]
[110.89034271 311.08239746]
[124.76152802 323.77038574]
[125.14007568 342.25100708]
[112.24601746 355.05331421]
[113.19738007 370.02310181]
[114.14873505 384.99291992]
[115.10009766 399.96270752]
[116.05145264 414.93249512]
[127.09360504 426.57083130]
[124.73644257 442.43975830]
[110.78819275 450.36605835]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 74]
[25 73]
[27 45]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% Start Annotations
1 50 9  0 0.9 0.2 omark
52 98 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
